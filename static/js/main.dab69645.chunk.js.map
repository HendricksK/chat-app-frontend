{"version":3,"sources":["components/Header/Header.jsx","components/Message/index.js","components/Message/Message.jsx","components/ChatHistory/ChatHistory.jsx","components/ChatInput/ChatInput.jsx","api/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Message","props","temp","JSON","parse","message","console","log","Body","state","this","Component","ChatHistory","messages","chatHistory","map","msg","data","ChatInput","onKeyDown","send","socket","WebSocket","App","cb","setState","prevState","onopen","onmessage","onclose","event","onerror","error","keyCode","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"iVASeA,G,MANA,kBACX,yBAAKC,UAAU,UACX,oDCHOC,G,8DCEb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAIC,EAAOC,KAAKC,MAAM,EAAKH,MAAMI,SAFhB,OAGjBC,QAAQC,IAAI,SAAWL,EAAKM,MAC5B,EAAKC,MAAQ,CACXJ,QAASH,GALM,E,qDAUjB,OAAO,yBAAKH,UAAU,WAAWW,KAAKD,MAAMJ,QAAQG,U,GAXlCG,cCgBPC,E,uKAXP,IAAMC,EAAWH,KAAKT,MAAMa,YAAYC,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAASX,QAASW,EAAIC,UAEzE,OACI,yBAAKlB,UAAU,eACX,4CACCc,O,GATSF,aCUXO,G,6KATX,OACE,yBAAKnB,UAAU,aACb,2BAAOoB,UAAWT,KAAKT,MAAMmB,Y,GAJbT,cCFpBU,G,MAAS,IAAIC,UAAU,6CCqDZC,E,kDA3Cd,WAAYtB,GAAQ,IAAD,8BAClB,cAAMA,IACDQ,MAAQ,CACZK,YAAa,IAHI,E,gEAOE,IDfPU,ECeM,ODfNA,ECgBL,SAACR,GACRV,QAAQC,IAAI,eACZ,EAAKkB,UAAS,SAAAC,GAAS,MAAK,CAC3BZ,YAAY,GAAD,mBAAM,EAAKL,MAAMK,aAAjB,CAA8BE,QAE1CV,QAAQC,IAAI,EAAKE,QDpBlBH,QAAQC,IAAI,iBAEZc,EAAOM,OAAS,WACdrB,QAAQC,IAAI,2BAGdc,EAAOO,UAAY,SAACZ,GAClBV,QAAQC,IAAIS,GACZQ,EAAGR,IAGLK,EAAOQ,QAAU,SAACC,GAChBxB,QAAQC,IAAI,6BAA8BuB,IAG5CT,EAAOU,QAAU,SAACC,GAChB1B,QAAQC,IAAI,iBAAkByB,M,2BCQ5BF,GDJQ,IAACd,ECKQ,KAAlBc,EAAMG,UACR3B,QAAQC,IAAIuB,EAAMI,OAAOC,ODNbnB,ECOJc,EAAMI,OAAOC,MDNtB7B,QAAQC,IAAI,gBAAiBS,GAC7BK,EAAOD,KAAKJ,GCMXc,EAAMI,OAAOC,MAAQ,M,+BAUtB,OACE,yBAAKpC,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAae,YAAaJ,KAAKD,MAAMK,cACrC,kBAAC,EAAD,CAAWM,KAAMV,KAAKU,Y,GArCTT,aCGEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACL1B,QAAQ0B,MAAMA,EAAM3B,c","file":"static/js/main.dab69645.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Header.scss\"\n\nconst Header = () => (\n    <div className=\"header\">\n        <h2>Realtime Chat App</h2>\n    </div>\n)\n\nexport default Header;","import Message from \"./Message.jsx\";\n\nexport default Message;","import React, { Component } from \"react\";\nimport \"./Message.scss\";\n\nclass Message extends Component {\n  constructor(props) {\n    super(props);\n    let temp = JSON.parse(this.props.message);\n    console.log('temp: ' + temp.Body);\n    this.state = {\n      message: temp\n    };\n  }\n\n  render() {\n    return <div className=\"Message\">{this.state.message.Body}</div>;\n  }\n}\n\nexport default Message;","import React, { Component } from \"react\"\nimport \"./ChatHistory.scss\";\nimport Message from '../Message';\n\nclass ChatHistory extends Component {\n    render() {\n        // console.log(this.props.chatHistory);\n\n        const messages = this.props.chatHistory.map(msg => <Message message={msg.data} />);\n\n        return (\n            <div className=\"ChatHistory\">\n                <h2>Chat History</h2>\n                {messages}\n            </div>\n        );\n    }\n}\n\nexport default ChatHistory;","import React, { Component } from \"react\";\nimport \"./ChatInput.scss\";\n\nclass ChatInput extends Component {\n  render() {\n    return (\n      <div className=\"ChatInput\">\n        <input onKeyDown={this.props.send} />\n        {/* <button onClick={this.props.send}>Send</button> */}\n      </div>\n    );\n  }\n}\n\nexport default ChatInput;","// api/index.js\nvar socket = new WebSocket(\"ws:immense-falls-15803.herokuapp.com//ws\");\n\nlet connect = (cb) => {\n  console.log(\"connecting...\");\n\n  socket.onopen = () => {\n    console.log(\"Successfully Connected\");\n  };\n\n  socket.onmessage = (msg) => {\n    console.log(msg);\n    cb(msg);\n  };\n\n  socket.onclose = (event) => {\n    console.log(\"Socket Closed Connection: \", event);\n  };\n\n  socket.onerror = (error) => {\n    console.log(\"Socket Error: \", error);\n  };\n};\n\nlet sendMsg = (msg) => {\n  console.log(\"sending msg: \", msg);\n  socket.send(msg);\n};\n\nexport { connect, sendMsg };","// App.js\nimport React, { Component } from \"react\";\nimport Header from './components/Header/Header';\nimport ChatHistory from './components/ChatHistory/ChatHistory';\nimport ChatInput from './components/ChatInput/ChatInput';\n\nimport \"./App.css\";\nimport { connect, sendMsg } from \"./api\";\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tchatHistory: []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconnect((msg) => {\n\t\t\tconsole.log(\"New message\")\n\t\t\tthis.setState(prevState => ({\n\t\t\t\tchatHistory: [...this.state.chatHistory, msg]\n\t\t\t}))\n\t\t\tconsole.log(this.state);\n\t\t});\n\t}\n\n\tsend(event) {\n\t\tif(event.keyCode === 13) {\n\t\t\tconsole.log(event.target.value);\n\t\t\tsendMsg(event.target.value);\n\t\t\tevent.target.value = \"\";\n\t\t}\n\t}\n\n\t// setMessageValue(event) {\n\t// \tconsole.log(event)\n\t// \tthis.state.msg = event.target.value;\n\t// }\n\n\trender() {\n\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Header />\n\t\t\t\t\t<ChatHistory chatHistory={this.state.chatHistory} />\n\t\t\t\t\t<ChatInput send={this.send} />\n\t\t\t\t\t{/* <ChatInput onChange={this.setMessageValue} /> */}\n\t\t\t\t\t{/* <button onClick={this.send}>Hit</button> */}\n\t\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}